#!/usr/bin/perl
package bin::compute;
use Moo;

use lib 'lib';
use MFST::Skating::Data;

my $PER_PERSON = 1;
my $HIDE_NAME = 1;
use Text::ASCIITable;

use Encode qw/ encode decode /;

has filename => (
    is => "ro",
    isa => sub {
        my $val = shift;
        die "no file" unless $val && -f $val;
        $val;
    },
    required => 1
);

sub trim {
    my $text = shift;

    $text =~ s/^\s+//s;
    $text =~ s/\s+$//s;

    $text;
}

sub tablize {
    my $text = shift;

    my ($header, @rows) = map { trim($_) } split("\n", $text);

    # remove empty
    @rows = grep { $_ =~ /\d+/ } @rows;

    return { header => $header, rows => \@rows };
}

sub print_per_person {
    my ($self, $res) = @_;
    return unless $PER_PERSON;

    my @csorted = sort { $res->result->{$a} <=> $res->result->{$b} } @{ $res->competitors };
    my @tkeys = sort { eval("$b") <=> eval("$a") } keys %{ $res->table };

    for my $competitor ( @{ $res->competitors } ) {
        my $t = Text::ASCIITable->new({ headingText => $competitor });
        $t->setCols(
            "Name", "Marks", "*", @tkeys, "*", "Result"
        );

        for my $c ( @csorted ) {
            my $name = $HIDE_NAME && $c ne $competitor ? "?????" : $c;
            my @marks = sort { $a <=> $b } values %{$res->_c_data->{$c}};
            my @tvals = map {
                my $info = $res->table->{$_}->{$c};
                ($info && $info->{count})
                    ? "$info->{count}($info->{sum})" . ( $info->{count}*2 > @{$res->judges} ? "!" : "")
                    : ""
            } @tkeys;

            $t->addRow($name, join(" ", @marks), "*", @tvals, "*", $res->result->{$c});
        }

        open(my $file, ">per_person/$competitor") or die "can't open $competitor";
        print $file $t;
        close($file);
    }
}

sub run {
    my $self = shift;

    open(my $file, $self->filename) or die "can't open file";
    my $data = encode("utf8", decode("cp1251", do { local $/ = undef; <$file> } // ""));
    close($file);

    my @tables = map { tablize( trim($_) ) } grep { $_ } split /^.*Участни(?:ки|цы).*$/m, $data;
    my @res = map { $self->compute_norm( $_ ) } @tables;

    for my $r (@res) {
        print $r->to_s . "\n";
        $self->print_per_person($r);
    }
}

sub compute_norm {
    my ($self, $table) = @_;

    my ($empty, @competitors) = split /\s*;\s*/, $table->{header};
    my $data = {
        map {
            my ($judge, @marks) = split /\s*;\s*/, $_;
            ($judge => \@marks)
        } @{ $table->{rows} }
    };

    my $computer = MFST::Skating::Data->new(
        competitors => \@competitors,
        data => $data
    );

    $computer->compute;

    $computer;
}

__PACKAGE__->new( filename => $ARGV[0] )->run;
